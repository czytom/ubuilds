diff --git a/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java b/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java
index bdd4954..17cbe2e 100644
--- a/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java
+++ b/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java
@@ -31,7 +31,7 @@ import java.util.Map;
 /**
 	JDBC 2 brokered CallableStatement
  */
-public class BrokeredCallableStatement extends BrokeredPreparedStatement
+public abstract class BrokeredCallableStatement extends BrokeredPreparedStatement
           implements CallableStatement
 {
 
diff --git a/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java b/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
index 12091f3..4e53b28 100644
--- a/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
+++ b/java/engine/org/apache/derby/iapi/jdbc/BrokeredConnection.java
@@ -46,7 +46,7 @@ import org.apache.derby.shared.common.reference.SQLState;
  * This is a rudimentary connection that delegates
  * EVERYTHING to Connection.
  */
-public class BrokeredConnection implements EngineConnection
+public abstract class BrokeredConnection implements EngineConnection
 {
 	
 	// default for Derby
@@ -449,12 +449,8 @@ public class BrokeredConnection implements EngineConnection
 	public BrokeredStatement newBrokeredStatement(BrokeredStatementControl statementControl) throws SQLException {
 		return new BrokeredStatement(statementControl, getJDBCLevel());
 	}
-	public BrokeredPreparedStatement newBrokeredStatement(BrokeredStatementControl statementControl, String sql, Object generatedKeys) throws SQLException {
-		return new BrokeredPreparedStatement(statementControl, getJDBCLevel(), sql);
-	}
-	public BrokeredCallableStatement newBrokeredStatement(BrokeredStatementControl statementControl, String sql) throws SQLException {
-		return new BrokeredCallableStatement(statementControl, getJDBCLevel(), sql);
-	}
+	public abstract BrokeredPreparedStatement newBrokeredStatement(BrokeredStatementControl statementControl, String sql, Object generatedKeys) throws SQLException;
+	public abstract BrokeredCallableStatement newBrokeredStatement(BrokeredStatementControl statementControl, String sql) throws SQLException;
 
 	/**
 	 *  set the DrdaId for this connection. The drdaID prints with the 
diff --git a/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java b/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
index 25dec30..8bef8d1 100644
--- a/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
+++ b/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
@@ -32,7 +32,7 @@ import java.net.URL;
 	JDBC 2 brokered PreparedStatement. Forwards calls off to a real prepared statement
 	obtained through the BrokeredStatementControl getRealPreparedStatement method.
  */
-public class BrokeredPreparedStatement extends BrokeredStatement
+public abstract class BrokeredPreparedStatement extends BrokeredStatement
 	implements EnginePreparedStatement
 {
 
diff --git a/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement20.java b/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement20.java
index 5647e48..1f9cdc1 100644
--- a/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement20.java
+++ b/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement20.java
@@ -68,7 +68,7 @@ import org.apache.derby.impl.jdbc.EmbedResultSet;
  *
  *	@author francois
  */
-public class EmbedCallableStatement20
+public abstract class EmbedCallableStatement20
 	extends org.apache.derby.impl.jdbc.EmbedCallableStatement 
 {
 
diff --git a/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index 4e8339e..bbc5cbe 100644
--- a/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -91,7 +91,7 @@ import org.apache.derby.impl.jdbc.authentication.NoneAuthenticationServiceImpl;
  * @see TransactionResourceImpl
  *
  */
-public class EmbedConnection implements EngineConnection
+public abstract class EmbedConnection implements EngineConnection
 {
 
 	private static final StandardException exceptionClose = StandardException.closeException();
diff --git a/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement20.java b/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement20.java
index cf32dfd..2f5abfa 100644
--- a/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement20.java
+++ b/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement20.java
@@ -58,7 +58,7 @@ import java.sql.Types;
  *
  *	@author francois
  */
-public class EmbedPreparedStatement20
+public abstract class EmbedPreparedStatement20
 	extends org.apache.derby.impl.jdbc.EmbedPreparedStatement {
 
 	//////////////////////////////////////////////////////////////
diff --git a/java/engine/org/apache/derby/jdbc/Driver20.java b/java/engine/org/apache/derby/jdbc/Driver20.java
index cd4bcc1..1e88e60 100644
--- a/java/engine/org/apache/derby/jdbc/Driver20.java
+++ b/java/engine/org/apache/derby/jdbc/Driver20.java
@@ -54,7 +54,7 @@ import java.util.Properties;
 	methods and sql types.
 */
 
-public class Driver20 extends InternalDriver implements Driver {
+public abstract class Driver20 extends InternalDriver implements Driver {
 
 	private static final String[] BOOLEAN_CHOICES = {"false", "true"};
 
@@ -83,65 +83,6 @@ public class Driver20 extends InternalDriver implements Driver {
 		AutoloadedDriver.unregisterDriverModule();
 	}
 
-	/**
- 	 * Get a new nested connection.
-	 *
-	 * @param conn	The EmbedConnection.
-	 *
-	 * @return A nested connection object.
-	 *
-	 */
-	public Connection getNewNestedConnection(EmbedConnection conn)
-	{
-		return new EmbedConnection(conn);
-	}
-
-	/*
-		Methods to be overloaded in sub-implementations such as
-		a tracing driver.
-	 */
-	public EmbedConnection getNewEmbedConnection(String url, Properties info)
-		 throws SQLException 
-	{
-		// make a new local connection with a new transaction resource
-		return new EmbedConnection(this, url, info);
-	}
-
-	/**
-	 	@exception SQLException if fails to create statement
-	 */
-	public java.sql.PreparedStatement 
-	newEmbedPreparedStatement (EmbedConnection conn, 
-							   String stmt, 
-							   boolean forMetaData,
-							   int resultSetType,
-							   int resultSetConcurrency,
-							   int resultSetHoldability,
-							   int autoGeneratedKeys,
-							   int[] columnIndexes,
-							   String[] columnNames)
-		 throws SQLException
-	{
-		return new EmbedPreparedStatement20(conn, stmt, forMetaData,
-										  resultSetType, resultSetConcurrency, resultSetHoldability,
-										  autoGeneratedKeys, columnIndexes, columnNames);
-	}
-
-	/**
-	 	@exception SQLException if fails to create statement
-	 */
-	public java.sql.CallableStatement newEmbedCallableStatement(
-				EmbedConnection conn,
-				String stmt, 
-				int resultSetType,
-				int resultSetConcurrency,
-				int resultSetHoldability)
-		throws SQLException
-	{
-		return new EmbedCallableStatement20(conn, stmt,
-										  resultSetType, resultSetConcurrency, resultSetHoldability);
-	}
-  
 	public org.apache.derby.impl.jdbc.EmbedResultSet 
 	newEmbedResultSet(EmbedConnection conn, ResultSet results, boolean forMetaData, org.apache.derby.impl.jdbc.EmbedStatement statement, boolean isAtomic)
 		throws SQLException
@@ -149,10 +90,8 @@ public class Driver20 extends InternalDriver implements Driver {
 		return new EmbedResultSet20(conn, results, forMetaData, statement,
 								 isAtomic); 
 	}
-	public BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control) {
+	public abstract BrokeredConnection newBrokeredConnection(BrokeredConnectionControl control);
 
-		return new BrokeredConnection(control);
-	}
     /**
      * <p>The getPropertyInfo method is intended to allow a generic GUI tool to 
      * discover what properties it should prompt a human for in order to get 
