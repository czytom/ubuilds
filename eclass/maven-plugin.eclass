# Copyright 1999-2006 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

#
# Original Author: nichoj
# Purpose: To facilitate packaging maven plugins.
#

inherit java-pkg-2 base

#make this maven2 specific and move it to java-pkg-2.eclass or a
#maven-utils.eclass (hopefully)
JAVA_MAVEN_SYSTEM_PLUGINS="/usr/share/maven2-gentoo-repo"


HOMEPAGE="http://maven.apache.org"
#SRC_URI="http://gentooexperimental.org/distfiles/${P}-gentoo.tar.bz2"
HOST_URL="http://ibiblio.org/pub/packages/maven2"
MAVEN_URL_STRUCTURE="${GROUPID//.//}"
MAVEN_URL_STRUCTURE="${MAVEN_URL_STRUCTURE}/${ARTIFACTID}"
DIRECTORY_URL="${HOST_URL}/${MAVEN_URL_STRUCTURE}/${VERSION}"
SOURCE_URL="${DIRECTORY_URL}/${ARTIFACTID}-${VERSION}-sources.jar"
POM_URL="${DIRECTORY_URL}/${ARTIFACTID}-${VERSION}.pom ${DIRECTORY_URL}/${ARTIFACTID}-${VERSION}.pom.sha1"

SRC_URI="${SOURCE_URL} ${POM_URL}"


#If this is a 'virtual plugin' it will only install the pom and pom.sha1
#Accepts either 0 or 1.
MAVEN_PLUGIN_VIRTUAL="${MAVEN_PLUGIN_VIRTUAL=0}"

#this is really going to need to be cleaned up.
MAVEN_PLUGIN_CORE_CP="/usr/share/maven-bin-2.0/lib/:/usr/share/maven-bin-2.0/core/plexus-container-default-1.0-alpha-9.jar:/usr/share/maven-bin-2.0/core/plexus-utils-1.1.jar"

MAVEN_PLUGIN_CP_EXT=""

LICENSE="Apache-2.0"

RDEPEND=">=virtual/jdk-1.4
	dev-java/ant-core"
DEPEND="${RDEPEND}"
IUSE="doc"

EXPORT_FUNCTIONS src_unpack src_compile src_install

maven-plugin_populate-jars() {
	true
}

maven-plugin_src_unpack() {
	# Use base, so we get some patching magic
	#base_src_unpack

	if [[ !${MAVEN_PLUGIN_VIRTUAL} ]]; then

		mkdir -p src
		cd src
		unpack "${ARTIFACTID}-${VERSION}-sources.jar"

		cd ${S}
		# This build.xml was generated by 'maven ant', and fixed slightly.
		local build_xml
		if [[ -f ${FILESDIR}/build-${PVR}.xml ]]; then
			build_xml=${FILESDIR}/build-${PVR}.xml
		elif [[ -f ${FILESDIR}/build-${PV}.xml ]]; then
			build_xml=${FILESDIR}/build-${PV}.xml
		else
			die "Couldn't find a suitable build.xml"
		fi

		cp ${build_xml} build.xml

		mkdir -p target/lib
		cd target/lib

		maven-plugin_populate-jars
	fi
}

maven-plugin_src_compile() {
	if [[ !${MAVEN_PLUGIN_VIRTUAL} ]]; then

		#Make this use java-config when maven is built from source

		local classpath="${MAVEN_PLUGIN_CP}"
		if [[ ${#MAVEN_PLUGIN_CP_EXT} != 0  ]]; then
			# this is only necessary as we can't default MAVEN_PLUGIN_CP in
			# MAVEN_PLUGIN_CP_EXT
			classpath="${classpath}:$(java-pkg_getjars ${MAVEN_PLUGIN_CP_EXT})"
		fi
		local antflags="jar $(use_doc javadoc) -Dclasspath=${classpath}"
		#:$(java-pkg_getjars ${MAVEN_PLUGIN_CP_EXT})"
		#echo ${MAVEN_PLUGIN_CP}
		ant ${antflags} || die "ant failed"
	fi
}

maven-plugin_src_install() {
	maven_doplugin target/${PN}.jar
}

function maven_doplugin() {
	# TODO check args

	local repo_path="${GROUPID//.//}/${ARTIFACTID}/${VERSION}"
	dodir "${JAVA_MAVEN_SYSTEM_PLUGINS}/${repo_path}"

	#refactor this class so that src_install doesn't assume their is a jar

	if [[ !${MAVEN_PLUGIN_VIRTUAL} ]]; then

		local plugin_jar=${1}
		local plugin_basename=$(basename ${1})

		java-pkg_dojar ${plugin_jar}

		local jardir
		if [[ ${SLOT} != "0" ]]; then
			jardir="/usr/share/${PN}-${SLOT}/lib"
		else
			jardir="/usr/share/${PN}/lib"
		fi
		local installed_jar="${jardir}/${plugin_basename}"

		local repo_path="${GROUPID//.//}/${ARTIFACTID}/${VERSION}"

		#dodir "${JAVA_MAVEN_SYSTEM_PLUGINS}"
		dosym "${installed_jar}" \
			"${JAVA_MAVEN_SYSTEM_PLUGINS}/${repo_path}/${plugin_basename}"

	fi
	for file in ${A}; do
		if [[ "${file}" =~ ".pom" ]]; then
			cp "/usr/portage/distfiles/${file}" "${D}/${JAVA_MAVEN_SYSTEM_PLUGINS}/${repo_path}${file_basename}"
		fi
	done

	use doc && java-pkg_dojavadoc javadoc
}


# TODO reduce redunancy of doplugin/newplugin

function maven_newplugin() {
	# TODO check args
	local plugin_jar=${1}
	local plugin_basename=$(basename ${1})
	local plugin_newjar="${2}"

	java-pkg_newjar ${plugin_jar} ${plugin_newjar}

	local jardir
	if [[ ${SLOT} != "0" ]]; then
		jardir="/usr/share/${PN}-${SLOT}/lib"
	else
		jardir="/usr/share/${PN}/lib"
	fi
	local installed_jar="${jardir}/${plugin_newjar}"

	dodir "${JAVA_MAVEN_SYSTEM_PLUGINS}"
	dosym "${installed_jar}" \
		"${JAVA_MAVEN_SYSTEM_PLUGINS}/${plugin_basename}"
}
